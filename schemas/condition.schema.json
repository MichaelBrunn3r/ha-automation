{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://github.com/MichaelBrunn3r/ha-blueprints/schemas/condition.schema.json",
  "oneOf": [
    {
      "title": "AND Condition",
      "description": "Test multiple conditions in one condition statement. Passes if all embedded conditions are valid",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "alias": {
              "type": "string"
            },
            "condition": {
              "const": "and"
            },
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#"
              }
            },
            "enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "condition",
            "conditions"
          ]
        },
        {
          "type": "array",
          "items": {
            "$ref": "#"
          }
        },
        {
          "type": "object",
          "properties": {
            "alias": {
              "type": "string"
            },
            "and": {
              "type": "array",
              "items": {
                "$ref": "#"
              }
            },
            "enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "and"
          ]
        }
      ]
    },
    {
      "title": "OR Condition",
      "description": "Test multiple conditions in one condition statement. Passes if any embedded condition is valid",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "alias": {
              "type": "string"
            },
            "condition": {
              "const": "or"
            },
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#"
              }
            },
            "enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "condition",
            "conditions"
          ]
        },
        {
          "type": "object",
          "properties": {
            "alias": {
              "type": "string"
            },
            "or": {
              "type": "array",
              "items": {
                "$ref": "#"
              }
            },
            "enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "or"
          ]
        }
      ]
    },
    {
      "title": "NOT Condition",
      "description": "Test multiple conditions in one condition statement. Passes if all embedded conditions are not valid",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "alias": {
              "type": "string"
            },
            "condition": {
              "const": "not"
            },
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#"
              }
            },
            "enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "condition",
            "conditions"
          ]
        },
        {
          "type": "object",
          "properties": {
            "alias": {
              "type": "string"
            },
            "not": {
              "type": "array",
              "items": {
                "$ref": "#"
              }
            },
            "enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "not"
          ]
        }
      ]
    },
    {
      "title": "Numeric State Condition",
      "description": "This type of condition attempts to parse the state of the specified entity or the attribute of an entity as a number, and triggers if the value matches the thresholds",
      "type": "object",
      "properties": {
        "alias": {
          "type": "string"
        },
        "condition": {
          "const": "numeric_state"
        },
        "entity_id": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "above": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "string",
              "pattern": "^(input_number|number|sensor)\\..+"
            }
          ]
        },
        "below": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "string",
              "pattern": "^(input_number|number|sensor)\\..+"
            }
          ]
        },
        "value_template": {
          "$ref": "defs.schema.json#/$defs/template"
        },
        "attribute": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "condition",
        "entity_id"
      ]
    },
    {
      "title": "State Condition",
      "description": "Tests if an entity is a specified state",
      "type": "object",
      "properties": {
        "alias": {
          "type": "string"
        },
        "condition": {
          "const": "state"
        },
        "entity_id": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "attribute": {
          "type": "string"
        },
        "state": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "$ref": "defs.schema.json#/$defs/helper_entity"
            }
          ]
        },
        "match": {
          "const": "any"
        },
        "for": {
          "$ref": "defs.schema.json#/$defs/time_period"
        },
        "enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "condition",
        "entity_id",
        "state"
      ]
    },
    {
      "title": "Sun Condition",
      "description": "The sun state can be used to test if the sun has set or risen",
      "type": "object",
      "properties": {
        "alias": {
          "type": "string"
        },
        "condition": {
          "const": "sun"
        },
        "entity_id": {
          "type": "string"
        },
        "state": {
          "enum": [
            "above_horizon",
            "below_horizon"
          ]
        },
        "after": {
          "enum": [
            "sunset",
            "sunrise"
          ]
        },
        "before": {
          "enum": [
            "sunset",
            "sunrise"
          ]
        },
        "after_offset": {
          "$ref": "defs.schema.json#/$defs/time_offset_str"
        },
        "before_offset": {
          "$ref": "defs.schema.json#/$defs/time_offset_str"
        },
        "enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "condition"
      ]
    },
    {
      "title": "Template Condition",
      "description": "The template condition tests if the given template renders a value equal to true",
      "oneOf": [
        {
          "$ref": "defs.schema.json#/$defs/template"
        },
        {
          "type": "object",
          "properties": {
            "alias": {
              "type": "string"
            },
            "condition": {
              "const": "template"
            },
            "value_template": {
              "$ref": "defs.schema.json#/$defs/template"
            },
            "enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "condition",
            "value_template"
          ]
        }
      ]
    },
    {
      "title": "Time Condition",
      "description": "The time condition can test if it is after a specified time, before a specified time or if it is a certain day of the week",
      "type": "object",
      "properties": {
        "alias": {
          "type": "string"
        },
        "condition": {
          "const": "time"
        },
        "after": {
          "oneOf": [
            {
              "$ref": "defs.schema.json#/$defs/time_str"
            },
            {
              "type": "string",
              "pattern": "^(input_datetime|sensor)\\..+"
            }
          ]
        },
        "before": {
          "oneOf": [
            {
              "$ref": "defs.schema.json#/$defs/time_str"
            },
            {
              "type": "string",
              "pattern": "^(input_datetime|sensor)\\..+"
            }
          ]
        },
        "weekday": {
          "type": "array",
          "items": {
            "enum": [
              "mon",
              "tue",
              "wed",
              "thu",
              "fri",
              "sat",
              "sun"
            ]
          }
        },
        "enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "condition"
      ]
    },
    {
      "title": "Trigger Condition",
      "description": "The trigger condition can test if an automation was triggered by a certain trigger, identified by the trigger's 'id'",
      "type": "object",
      "properties": {
        "alias": {
          "type": "string"
        },
        "condition": {
          "const": "trigger"
        },
        "id": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "condition",
        "id"
      ]
    },
    {
      "title": "Zone Condition",
      "description": "Zone conditions test if an entity is in a certain zone",
      "type": "object",
      "properties": {
        "alias": {
          "type": "string"
        },
        "condition": {
          "const": "zone"
        },
        "entity_id": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "zone": {
          "$ref": "defs.schema.json#/$defs/zone_id"
        },
        "state": {
          "type": "array",
          "items": {
            "$ref": "defs.schema.json#/$defs/zone_id"
          }
        },
        "enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "condition",
        "entity_id"
      ]
    }
  ]
}
